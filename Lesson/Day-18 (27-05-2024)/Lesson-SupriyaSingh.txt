Start Date: 29-04-2024

Supriya Singh, M.Com, Angul
Mobile No.: 8249876924
Email-id: singhsupriya9957@gmail.com
GitHub repo: https://github.com/milandas63/SupriyaSingh
GitHub id: supriya432

+--------------------+
| Monday, 29-04-2024 |
+--------------------+
    Microsoft Office is a suite of applications designed to help with productivity 
    and completing common tasks on a computer. You can create and edit documents 
    containing text and images, work with data in spreadsheets and databases, and 
    create presentations and posters. Microsoft Office: an overview.

    Course to cover:
    1.  Words               Todo
    2.  Power Point         Todo
    3.  Excel               Todo
    4.  MySQL               Todo

    =   Watching MS-Word videos and learning

+---------------------+
| Tuesday, 30-04-2024 |
+---------------------+
    =   Watching MS-PowerPoint videos and learning

+-----------------------+
| Wednesday, 01-05-2024 |
+-----------------------+
    =   Introduction to Excel
    =   Excel Menu System
    =   Shortcut Keystrokes

+----------------------+
| Thursday, 02-05-2024 |
+----------------------+
    =   Absolute and Relative Cell Referencing

+--------------------+
| Friday, 03-05-2024 |
+--------------------+
    =   Conditional Formatting

+--------------------+
| Monday, 06-05-2024 |
+--------------------+
    =   MCQ Test on MS-Words

+---------------------+
| Tuesday, 07-05-2024 |
+---------------------+
    =   Data Validation
        a)  Data validation is implemented to restrict entering wrong data.
        b)  The data which are already entered are plotted and removed.

+-----------------------+
| Wednesday, 08-05-2024 |
+-----------------------+
    =   Project work using Data-Validation
    =   3D-Sum
    =   Consolidation

+----------------------+
| Thursday, 09-05-2024 |
+----------------------+
    =   Create a PPT on Data Validation. There will be 5 slides, simple and elaborate.
    =   The TEXT function
        The TEXT function lets you change the way a number appears by applying 
        formatting to it with format codes. It's useful in situations where you
        want to display numbers in a more readable format, or you want to combine
        numbers with text or symbols.
        Syntax:
            =TEXT(Value you want to format, "Format code you want to apply")
        
        Formula                         Description
        =TEXT(1234.567,"$#,##0.00")     Currency with a thousands separator and 2 decimals, like $1,234.57. Note that Excel rounds the value to 2 decimal places.
        =TEXT(TODAY(),"MM/DD/YY")       Today’s date in MM/DD/YY format, like 03/14/12
        =TEXT(TODAY(),"DDDD")           Today’s day of the week, like Monday
        =TEXT(NOW(),"H:MM AM/PM")       Current time, like 1:29 PM
        =TEXT(0.285,"0.0%")             Percentage, like 28.5%
        =TEXT(4.34 ,"# ?/?")            Fraction, like 4 1/3
        =TRIM(TEXT(0.34,"# ?/?"))       Fraction, like 1/3. Note this uses the TRIM function to remove the leading space with a decimal value.
        =TEXT(12200000,"0.00E+00")      Scientific notation, like 1.22E+07
        =TEXT(1234567898,"[<=9999999]###-####;(###) ###-####")
                                        Special (Phone number), like (123) 456-7898
        =TEXT(1234,"0000000")           Add leading zeros (0), like 0001234
        =TEXT(123456,"##0° 00' 00''")   Custom - Latitude/Longitude

+--------------------+
| Friday, 10-05-2024 |
+--------------------+
    =   Translator
    =   Sort
    =   Filter
    =   Vlookup
    =   Hlookup
    =   Transpose
    =   Flash Fill
    =   Text to Column

+--------------------+
| Monday, 13-05-2024 |
+--------------------+
    =   Table (data analytics table)
    =   Slicer
    =   Back to range
    =   Creating Macro

+---------------------+
| Tuesday, 14-05-2024 |
+---------------------+
    =   Graphs and Charts
    =   Excel Macros

+-----------------------+
| Wednesday, 15-05-2024 |
+-----------------------+
    =   Data Analysis & Forecast - Slide PPT
    =   Project Assignment - Sales Invoice Entry

+--------------------+
| Monday, 20-05-2024 |
+--------------------+
    =   RDBMS stands for Relational DataBase Management System
        SQL stands for Structured Query Language

    =   Example of RDBMS engines:
        >   Oracle              Oracle Corp.
        >   MS-SQL Server       Microsoft Corp.
        >   Informix
        >   Ingress
        >   GuptaSQL
        >   DB2
        >   MySQL/MariaDB
        >   PostgreSQL
        >   

    =   How to create a user?
        CREATE USER 'supriya'@'localhost' IDENTIFIED BY 'supriya';

    =   How to grant privileges to a user?
        GRANT ALL PRIVILEGES ON *.* TO 'supriya'@'localhost';

    =   All the commands in SQL are categorised into 3 parts:
        1)  DDL - Data Definition Language
        2)  DML - Data Manipulation Language
        3)  DCL - Data Control Language

    =   What are commands that fall under DDL?
        ALTER, CREATE, DROP, TRANCATE, RENAME, etc. are commands that fall under DDL

    =   What are commands that fall under DML?
        INSERT, MERGE, UPDATE, DELETE, SELECT, etc.

    =   What are commands that fall under DCL?
        COMMIT, CONNECT, GRANT, LOCK, REVOKE, ROLLBACK, etc.

    =   How to create a database?
        CREATE DATABASE [IF NOT EXISTS] <dbName>;
        CREATE DATABASE supriya;

    =   How to connect to a database?
        USE <dbName>;
        USE supriya;

    =   How to create a table inside a database?
        CREATE TABLE [IF NOT EXISTS] employ(
            emp_id          INT(6)          NOT NULL AUTO_INCREMENT,
            emp_name        VARCHAR(30)     NOT NULL UNIQUE,
            dob             DATE,
            PRIMARY KEY(emp_id)
        );
        CREATE TABLE employ(
            emp_id          INT(6)          NOT NULL AUTO_INCREMENT,
            emp_name        VARCHAR(30)     NOT NULL UNIQUE,
            dob             DATE,
            PRIMARY KEY(emp_id)
        );

    =   How to see the content of a table header?
        DESCRIBE <tbName>;


+---------------------+
| Tuesday, 21-05-2024 |
+---------------------+
    =   While defining the column name in the CREATE TABLE command, two more things are
        provided, i.e. the column-type and column-constraints.

    =   The list of the valid mysql column types are as follows:
        Blob
        Float
        Char
        Datetime
        Enum
        INT
        Numeric types
        Binary file
        VARCHAR
        Char byte
        Data type
        Date and time types
        String types
        Binary number
        Double
        Text
        Time
        TINYTEXT
        BigInt
        Bool
        LONGTEXT
        MEDIUMINT
        Precision
        Boolean data type

    =   The list of the valid mysql constraints are as follows:
        Primary key             table constraint
        Foreign key             table constraint
        NOT NULL                column constraint
        Check                   table constraint
        Default                 column constraint
        Unique key              table constraint
        Unique                  column constraint
        CHECK constraint        column constraint
        Constraint              table constraint
        auto_increment          column constraint
        ENUM                    column constraint

    =   Create a table with the following columns:
        
        Table-1: designation
        desig_id
        desig_desc
        desig_abbr

        Table-2: department
        dept_id
        dept_name
        dept_abbr

        Table-3: employ
        emp_id
        emp_name
        gender
        desig_id
        dept_id
        dob
        doj
        high_qualif


+-----------------------+
| Wednesday, 22-05-2024 |
+-----------------------+
    =   MySQL Data Types
        String Data Types
        >   Data type 	    Description
        >   CHAR(size) 	    A FIXED length string (can contain letters, numbers, and special
                            characters). The size parameter specifies the column length in
                            characters - can be from 0 to 255. Default is 1
        >   VARCHAR(size) 	A VARIABLE length string (can contain letters, numbers, and special characters). The size parameter specifies the maximum column length in characters - can be from 0 to 65535
        >   BINARY(size) 	Equal to CHAR(), but stores binary byte strings. The size parameter specifies the column length in bytes. Default is 1
        >   VARBINARY(size) Equal to VARCHAR(), but stores binary byte strings. The size parameter specifies the maximum column length in bytes.
        >   TINYBLOB 	    For BLOBs (Binary Large OBjects). Max length: 255 bytes
        >   TINYTEXT 	    Holds a string with a maximum length of 255 characters
        >   TEXT(size) 	    Holds a string with a maximum length of 65,535 bytes
        >   BLOB(size) 	    For BLOBs (Binary Large OBjects). Holds up to 65,535 bytes of data
        >   MEDIUMTEXT 	    Holds a string with a maximum length of 16,777,215 characters
        >   MEDIUMBLOB 	    For BLOBs (Binary Large OBjects). Holds up to 16,777,215 bytes of data
        >   LONGTEXT 	    Holds a string with a maximum length of 4,294,967,295 characters
        >   LONGBLOB 	    For BLOBs (Binary Large OBjects). Holds up to 4,294,967,295 bytes of data
        >   ENUM(val1, val2, val3, ...) 	A string object that can have only one value, chosen from a list of possible values. You can list up to 65535 values in an ENUM list. If a value is inserted that is not in the list, a blank value will be inserted. The values are sorted in the order you enter them
        >   SET(val1, val2, val3, ...) 	A string object that can have 0 or more values, chosen from a list of possible values. You can list up to 64 values in a SET list

        Numeric Data Types
        >   Data type 	    Description
        >   BIT(size) 	    A bit-value type. The number of bits per value is specified in size. The size parameter can hold a value from 1 to 64. The default value for size is 1.
        >   TINYINT(size) 	A very small integer. Signed range is from -128 to 127. Unsigned range is from 0 to 255. The size parameter specifies the maximum display width (which is 255)
        >   BOOL 	        Zero is considered as false, nonzero values are considered as true.
        >   BOOLEAN 	    Equal to BOOL
        >   SMALLINT(size) 	A small integer. Signed range is from -32768 to 32767. Unsigned range is from 0 to 65535. The size parameter specifies the maximum display width (which is 255)
        >   MEDIUMINT(size) A medium integer. Signed range is from -8388608 to 8388607. Unsigned range is from 0 to 16777215. The size parameter specifies the maximum display width (which is 255)
        >   INT(size) 	    A medium integer. Signed range is from -2147483648 to 2147483647. Unsigned range is from 0 to 4294967295. The size parameter specifies the maximum display width (which is 255)
        >   INTEGER(size) 	Equal to INT(size)
        >   BIGINT(size) 	A large integer. Signed range is from -9223372036854775808 to 9223372036854775807. Unsigned range is from 0 to 18446744073709551615. The size parameter specifies the maximum display width (which is 255)
        >   FLOAT(size, d) 	A floating point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter. This syntax is deprecated in MySQL 8.0.17, and it will be removed in future MySQL versions
        >   FLOAT(p) 	    A floating point number. MySQL uses the p value to determine whether to use FLOAT or DOUBLE for the resulting data type. If p is from 0 to 24, the data type becomes FLOAT(). If p is from 25 to 53, the data type becomes DOUBLE()
        >   DOUBLE(size, d) A normal-size floating point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter
        >   DOUBLE PRECISION(size, d) 	 
        >   DECIMAL(size, d) An exact fixed-point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter. The maximum number for size is 65. The maximum number for d is 30. The default value for size is 10. The default value for d is 0.
        >   DEC(size, d) 	Equal to DECIMAL(size,d)
        Note: All the numeric data types may have an extra option: UNSIGNED or ZEROFILL. If you add the UNSIGNED option, MySQL disallows negative values for the column. If you add the ZEROFILL option, MySQL automatically also adds the UNSIGNED attribute to the column.

        Date and Time Data Types
        >   Data type 	    Description
        >   DATE 	        A date. Format: YYYY-MM-DD. The supported range is from '1000-01-01' to '9999-12-31'
        >   DATETIME(fsp) 	A date and time combination. Format: YYYY-MM-DD hh:mm:ss. The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. Adding DEFAULT and ON UPDATE in the column definition to get automatic initialization and updating to the current date and time
        >   TIMESTAMP(fsp) 	A timestamp. TIMESTAMP values are stored as the number of seconds since the Unix epoch ('1970-01-01 00:00:00' UTC). Format: YYYY-MM-DD hh:mm:ss. The supported range is from '1970-01-01 00:00:01' UTC to '2038-01-09 03:14:07' UTC. Automatic initialization and updating to the current date and time can be specified using DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP in the column definition
        >   TIME(fsp) 	    A time. Format: hh:mm:ss. The supported range is from '-838:59:59' to '838:59:59'
        >   YEAR 	        A year in four-digit format. Values allowed in four-digit format: 1901 to 2155, and 0000.
        MySQL 8.0 does not support year in two-digit format.


        Create a table resume with the following columns
        1.  name        VARCHAR(30)
        2.  father      VARCHAR(30)
        3.  gender      ENUM
        4.  dob         DATE
        5.  photo       BLOB
        6.  ...

    =   How to take backup of the data in MySQL?
        Use the command mysqldump to create backup of a database.
        Example:
            mysqldump supriya > supriya.sql

    =   How to restore the .sql backup file in MySQL?
        Follow the steps given below to restore file:
        1.  Start MySQL
        2.  Use database
        3.  SOURCE file.sql;

    =   How to insert data into a table?
        The command INSERT under DML facilitates to enter data into the table.
        Syntax:
        Option-1 for inserting data in a single row
            INSERT INTO <tbName>[(column-list...)] VALUES(data1, data2, data3, ....);

        Option-2 for inserting data in a multiple rows
            INSERT INTO <tbName>[(column-list...)] VALUES
                (data1, date2, data3, .....),
                (data1, date2, data3, .....),
                (data1, date2, data3, .....);

+----------------------+
| Thursday, 23-05-2024 |
+----------------------+
    =   How to take backup of an existing database?
        MySQL provides the command MYSQLDUMP to take backup from mysql RDBMS.
        MySQLDump is executed from the DOS prompt.

        Syntax to use MySQLDump from DOS prompt:
            mysqldump -uuser -ppassword <dbName> > outputFile.sql

    =   How to view the data using LEFT JOIN clause
        SELECT r.id AS ID,r.name AS CANDIDATE_NAME,r.mobile AS MOBILE_NO,r.qualif_id AS QUALIF_ID,q.qualif_desc AS QUALIF_DESCRIPTION,r.lang_id AS LANG_ID,l.lang_name AS LANGUAGE_NAME FROM resume AS r
        LEFT JOIN qualification AS q ON q.qualif_id=r.qualif_id
        LEFT JOIN language AS l ON l.lang_id=r.lang_id;

    =   The SELECT command is used to retrieve data from the RDBMS engine
        SELECT
            [ALL | DISTINCT | DISTINCTROW ]
            [HIGH_PRIORITY]
            [STRAIGHT_JOIN]
            [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]
            [SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]
            select_expr [, select_expr] ...
            [into_option]
            [FROM table_references
              [PARTITION partition_list]]
            [WHERE where_condition]
            [GROUP BY {col_name | expr | position}, ... [WITH ROLLUP]]
            [HAVING where_condition]
            [WINDOW window_name AS (window_spec)
                [, window_name AS (window_spec)] ...]
            [ORDER BY {col_name | expr | position}
              [ASC | DESC], ... [WITH ROLLUP]]
            [LIMIT {[offset,] row_count | row_count OFFSET offset}]
            [into_option]
            [FOR {UPDATE | SHARE}
                [OF tbl_name [, tbl_name] ...]
                [NOWAIT | SKIP LOCKED]
              | LOCK IN SHARE MODE]
            [into_option]

        into_option: {
            INTO OUTFILE 'file_name'
                [CHARACTER SET charset_name]
                export_options
          | INTO DUMPFILE 'file_name'
          | INTO var_name [, var_name] ...
        }

    =   Create the following tables and show data:
        >   relationship
            rel_id
            rel_desc

            Family
            School Friends
            College Friends
            Professional Friends
            Sibling

    =   >   location
            loc_id
            loc_name

            Angul
            Bhubaneswar
            Berhampur
            Cuttack
            Sambalpur
            Roukella

    =   >   contact
            con_id
            con_name
            con_address
            con_mobile
            con_email
            con_loc_id
            con_rel_id

            Milan Das
            Supriya Singh
            Dillip Das
            Adit Jena

    =   Write a SELECT command that will show you the data in following columns:
        con_id
        con_name
        con_mobile
        loc_name
        rel_desc

+--------------------+
| Friday, 24-05-2024 |
+--------------------+
    =   ALTER TABLE
        Alter table is required to make changes in the table structure.
        Alter table is capable to ADD, MODIFY and DELETE columns in a table.

        create table location(
            loc_id		int(6)			NOT NULL AUTO_INCREMENT,
            loc_desc	VARCHAR(30)		NOT NULL UNIQUE,
            primary key(loc_id)
        );
        INSERT INTO location VALUES
            (1, 'Angul'),
            (2, 'Bhubaneswar'),
            (3, 'Berhampur'),
            (4, 'Cuttack'),
            (5, 'Sambalpur');

        ALTER TABLE location ADD loc_abbr VARCHAR(10) UNIQUE;

    =   The ALTER command can make changes to the following object:
        >   ALTER DATABASE
        >   ALTER EVENT
        >   ALTER FUNCTION
        >   ALTER LOGFILE GROUP
        >   ALTER PROCEDURE
        >   ALTER SEQUENCE
        >   ALTER TABLE
        >   ALTER TABLESPACE
        >   ALTER USER
        >   ALTER VIEW

    =   The WHERE clause in SELECT command
        The WHERE clause filters the data in the SELECT command.
        SELECT loc_id AS ID, loc_desc AS LOCATION, IFNULL(loc_abbr,"") AS ABBR 
        FROM location 
        WHERE loc_id>=2 and loc_id<=4;

    =   SELECT loc_id AS ID, loc_desc AS LOCATION, IFNULL(loc_abbr,"") AS ABBR 
        FROM location WHERE loc_id IN(2,3,4);

    =   SELECT loc_id AS ID, loc_desc AS LOCATION, IFNULL(loc_abbr,"") AS ABBR 
        FROM location WHERE loc_id IN(1,2,3,4);

    =   SELECT admission_class,COUNT(*) FROM admission_regd GROUP BY admission_class;

    =   SELECT student_name FROM admission_regd WHERE student_name LIKE '%mohapatra%';
        SELECT student_name FROM admission_regd WHERE student_name LIKE '%kumar%' order by 1;
        SELECT student_name FROM admission_regd WHERE student_name LIKE 'adit%';

+--------------------+
| Monday, 27-05-2024 |
+--------------------+
    =   ASSIGNMENT
        There is a table in the name resume in your database.
        Create another table in the name biodata with same structure and data as in 
        resume.

    =   CREATE TABLE <tbname1> LIKE <tbname2>
        A new tbname1 table is created with same structure as in tbname2.

    =   How to copy all rows from another table with same structure?
        INSERT INTO biodata SELECT * FROM resume;

    =   CREATE VIEW resumeview AS SELECT r.id,r.name,r.mobile,q.qualif_desc,l.lang_name FROM resume AS r LEFT JOIN qualification AS q ON r.qualif_id=q.qualif_id LEFT JOIN language AS l ON r.lang_id=l.lang_id

    =   CREATE a complex SELECT using at least 3 tables and convert it into a VIEW

